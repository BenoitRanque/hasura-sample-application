CREATE EXTENSION IF NOT EXISTS pgcrypto;

CREATE FUNCTION public.password_hashing()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        IF NEW.password IS NOT NULL THEN
            NEW.password = crypt(NEW.password, gen_salt('bf'));
        END IF;
    END IF;

    IF TG_OP = 'UPDATE' THEN
        IF NEW.password IS NOT NULL AND OLD.password <> NEW.password THEN
            -- POTENTIAL SECURITY FLAW!!!
            -- This trigger can fire twice when using an ON CONFLICT DO UPDATE clause,
            -- once for the insert, and again for the update.
            -- This could cause the password to be hashed twice and become useless.
            -- To avoid this we check if the password matches a regex for a bcrypt hash.
            -- if some bright soul decides to use a password that matches this pattern,
            -- it will be inserted into the database unhashed.
            -- this could potentially be a security issue, but I see no other way, for now.
            IF NEW.password !~ '^\$2[aby]?\$[\d]+\$[./A-Za-z0-9]{53}$' THEN
                NEW.password = crypt(NEW.password, gen_salt('bf'));
            END IF;
        END IF;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE public.user_history (
    id INTEGER NOT NULL,
    display_name TEXT NOT NULL,
    username TEXT NOT NULL,
    password TEXT NOT NULL,
    created_by_user_id INTEGER,
    updated_by_user_id INTEGER,
    deleted_by_user_id INTEGER,
    sys_period TSTZRANGE NOT NULL,
    EXCLUDE USING gist (id WITH =, sys_period WITH &&)
);

CREATE TABLE public.user (
    id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    PRIMARY KEY (id),
    UNIQUE (username),
    FOREIGN KEY (created_by_user_id) REFERENCES public.user (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    FOREIGN KEY (updated_by_user_id) REFERENCES public.user (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    FOREIGN KEY (deleted_by_user_id) REFERENCES public.user (id) ON UPDATE RESTRICT ON DELETE RESTRICT
) INHERITS (public.user_history);

-- triggers run in alphabetical order, numbers in their name ensure proper execution order
CREATE TRIGGER trigger_001_supress_redundant_updates
BEFORE UPDATE ON public.user
FOR EACH ROW EXECUTE FUNCTION suppress_redundant_updates_trigger();

CREATE TRIGGER trigger_002_versioning
BEFORE INSERT OR UPDATE OR DELETE ON public.user
FOR EACH ROW EXECUTE FUNCTION versioning('sys_period', 'public.user_history', true);

CREATE TRIGGER trigger_003_password_hashing
BEFORE INSERT OR UPDATE OF password ON public.user
FOR EACH ROW EXECUTE FUNCTION public.password_hashing();

COMMENT ON TABLE public.user                                    IS 'User';
COMMENT ON COLUMN public.user.id                                IS 'Primary key';
COMMENT ON COLUMN public.user.display_name                      IS 'Display name, typically the real name of the user';
COMMENT ON COLUMN public.user.username                          IS 'Username user for authentication, must be unique';
COMMENT ON COLUMN public.user.password                          IS 'Password is automatically hashed on insert';

COMMENT ON COLUMN public.user.created_by_user_id                IS 'id of user who created this record';
COMMENT ON COLUMN public.user.updated_by_user_id                IS 'id of user who updated this record';
COMMENT ON COLUMN public.user.deleted_by_user_id                IS 'id of user who deleted this record';
COMMENT ON COLUMN public.user.sys_period                        IS 'Effective system period for this record. Use in conjunction with primary key to retrieve past versions from history table';


COMMENT ON TABLE  public.user_history                           IS 'User History';
COMMENT ON COLUMN public.user_history.id                        IS 'Primary key';
COMMENT ON COLUMN public.user_history.display_name              IS 'Display name, typically the real name of the user';
COMMENT ON COLUMN public.user_history.username                  IS 'Username must be unique';
COMMENT ON COLUMN public.user_history.password                  IS 'Password is automatically hashed on insert';

COMMENT ON COLUMN public.user_history.created_by_user_id        IS 'id of user who created this record';
COMMENT ON COLUMN public.user_history.updated_by_user_id        IS 'id of user who updated this record';
COMMENT ON COLUMN public.user_history.deleted_by_user_id        IS 'id of user who deleted this record';
COMMENT ON COLUMN public.user_history.sys_period                IS 'Effective system period for this record. Use in conjunction with primary key to retrieve past versions from history table';

