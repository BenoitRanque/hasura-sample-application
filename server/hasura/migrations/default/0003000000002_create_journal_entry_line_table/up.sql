CREATE TABLE public.journal_entry_line_history (
    id INTEGER NOT NULL,
    journal_entry_id INTEGER NOT NULL,
    index INTEGER NOT NULL CHECK (index >= 0),
    account_id INTEGER NOT NULL,
    currency_id CHARACTER(3) NOT NULL,
    debit BIGINT CHECK (debit > 0 OR debit IS NULL),
    credit BIGINT CHECK (credit > 0 OR credit IS NULL),
    created_by_user_id INTEGER,
    updated_by_user_id INTEGER,
    deleted_by_user_id INTEGER,
    sys_period TSTZRANGE NOT NULL,
    CHECK (debit <> credit),
    EXCLUDE USING gist (id WITH =, sys_period WITH &&)
);

CREATE TABLE public.journal_entry_line (
    id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    PRIMARY KEY (id),
    CHECK (index >= 0),
    UNIQUE (id, index),
    CHECK (debit <> credit),
    CHECK (debit >= 0 OR debit IS NULL),
    CHECK (credit >= 0 OR credit IS NULL),
    FOREIGN KEY (account_id) REFERENCES public.account (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    FOREIGN KEY (currency_id) REFERENCES public.currency (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    FOREIGN KEY (account_id, currency_id) REFERENCES public.account_currency (account_id, currency_id)
        ON UPDATE RESTRICT ON DELETE RESTRICT,
    FOREIGN KEY (created_by_user_id) REFERENCES public.user (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    FOREIGN KEY (updated_by_user_id) REFERENCES public.user (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    FOREIGN KEY (deleted_by_user_id) REFERENCES public.user (id) ON UPDATE RESTRICT ON DELETE RESTRICT
) INHERITS (public.journal_entry_line_history);

-- triggers run in alphabetical order, numbers in their name ensure proper execution order
CREATE TRIGGER trigger_001_supress_redundant_updates
BEFORE UPDATE ON public.journal_entry_line
FOR EACH ROW EXECUTE FUNCTION suppress_redundant_updates_trigger();

CREATE TRIGGER trigger_002_versioning
BEFORE INSERT OR UPDATE OR DELETE ON public.journal_entry_line
FOR EACH ROW EXECUTE FUNCTION versioning('sys_period', 'public.journal_entry_line_history', true);

COMMENT ON TABLE  public.journal_entry_line                                   IS 'Journal Entry';
COMMENT ON COLUMN public.journal_entry_line.id                                IS 'Primary key';
COMMENT ON COLUMN public.journal_entry_line.journal_entry_id                  IS 'Parent journal entry id. Foreign Key';
COMMENT ON COLUMN public.journal_entry_line.index                             IS 'Index of line within parent journal entry.';
COMMENT ON COLUMN public.journal_entry_line.account_id                        IS 'Account affected by this line. Foreign key.';
COMMENT ON COLUMN public.journal_entry_line.currency_id                       IS 'Currency affected by this line. Foreign key.';
COMMENT ON COLUMN public.journal_entry_line.debit                             IS 'Debited ammount. Either debit or credit must be non null, and they cannot be equal.';
COMMENT ON COLUMN public.journal_entry_line.credit                            IS 'Credited ammount. Either debit or credit must be non null, and they cannot be equal.';

COMMENT ON COLUMN public.journal_entry_line.created_by_user_id                IS 'id of user who created this record';
COMMENT ON COLUMN public.journal_entry_line.updated_by_user_id                IS 'id of user who updated this record';
COMMENT ON COLUMN public.journal_entry_line.deleted_by_user_id                IS 'id of user who deleted this record';
COMMENT ON COLUMN public.journal_entry_line.sys_period                        IS 'Effective system period for this record. Use in conjunction with primary key to retrieve past versions from history table';


COMMENT ON TABLE  public.journal_entry_line_history                           IS 'Journal Entry History';
COMMENT ON COLUMN public.journal_entry_line_history.id                        IS 'Primary key';
COMMENT ON COLUMN public.journal_entry_line_history.journal_entry_id          IS 'Parent journal entry id. Foreign Key';
COMMENT ON COLUMN public.journal_entry_line_history.index                     IS 'Index of line within parent journal entry.';
COMMENT ON COLUMN public.journal_entry_line_history.account_id                IS 'Account affected by this line. Foreign key.';
COMMENT ON COLUMN public.journal_entry_line_history.currency_id               IS 'Currency affected by this line. Foreign key.';
COMMENT ON COLUMN public.journal_entry_line_history.debit                     IS 'Debited ammount. Either debit or credit must be non null, and they cannot be equal.';
COMMENT ON COLUMN public.journal_entry_line_history.credit                    IS 'Credited ammount. Either debit or credit must be non null, and they cannot be equal.';

COMMENT ON COLUMN public.journal_entry_line_history.created_by_user_id        IS 'id of user who created this record';
COMMENT ON COLUMN public.journal_entry_line_history.updated_by_user_id        IS 'id of user who updated this record';
COMMENT ON COLUMN public.journal_entry_line_history.deleted_by_user_id        IS 'id of user who deleted this record';
COMMENT ON COLUMN public.journal_entry_line_history.sys_period                IS 'Effective system period for this record. Use in conjunction with primary key to retrieve past versions from history table';

